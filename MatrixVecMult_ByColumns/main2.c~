#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
 
typedef struct {
   int n;
   int* data;
} SquareMatx;
 
void GenMatx(SquareMatx** m, int n);
void GenVec(int** v, int n);
int CopyColumm(SquareMatx* m, int idCol, int** out);
int MultVecVec(int* m, int* v, int n);
 
int main(int argc, char* argv[]) {
 
   SquareMatx* m = NULL;
   int n, myRank, comm_sz, local_n;
   int* v = NULL;
 
   MPI_Init(&argc, &argv);
   MPI_Comm_size(MPI_COMM_WORLD, &comm_sz);
   MPI_Comm_rank(MPI_COMM_WORLD, &myRank);
 
   if(myRank == 0) {
      int *buffer = NULL;
 
      printf("Digite a ordem da matriz: ");
      scanf("%d", &n);
 
      GenMatx(&m, n);
      GenVec(&v, n);
      if(!v) printf("genVec null\n");
      MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
      MPI_Bcast(v, n, MPI_INT, 0, MPI_COMM_WORLD);
//      printf("Process %d v[0] = %d\n", myRank, *v);
//
      local_n = n / comm_sz;
      if(n % comm_sz != 0){
         printf("Divisao de n por comm_sz gera resto\n");
         MPI_Finalize();
         exit(EXIT_FAILURE);
      }
 
      CopyColumm(m, 0, &buffer);
      int parcialResult = MultVecVec(buffer, v, n);
      printf("Process %d buffer[0] = %d\n", myRank, *buffer);
 
      int j;
      for(j = 1; j <= n; j++){
         CopyColumm(m, j, &buffer);
         MPI_Send(buffer, n, MPI_INT, j, j, MPI_COMM_WORLD);
      }
//
//      int* out = (int*) malloc(sizeof(int) * n);
//      out[0] = parcialResult;
//      for(j = 1; j < n; j++){
//         MPI_Recv(&parcialResult, 1, MPI_INT, j, j, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
//         out[j] = parcialResult;
//      }
//
//      for(j = 0; j < n; j++)
//         printf("%d ", out[j]);
 
   } else {
      v = (int*) malloc(sizeof(int) * n);
      if(!v) printf("not alloc v\n");
      MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);
      MPI_Bcast(v, n, MPI_INT, 0, MPI_COMM_WORLD);
//      printf("Process %d v[0] = %d\n", myRank, *v);
//
      int* buffer = (int*) malloc(sizeof(int) * n);
      MPI_Recv(buffer, n, MPI_INT, 0, myRank, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
      printf("Process %d buffer[0] = %d\n", myRank, *buffer);
//
//      int parcialResult = MultVecVec(buffer, v, n);
//      MPI_Send(&parcialResult, 1, MPI_INT, 0, myRank, MPI_COMM_WORLD);
   }
 
   MPI_Finalize();
 
   return 0;
}
 
int MultVecVec(int* m, int* v, int n) {
   if(!m || !v) return -1;
 
   int i, result = 0;
   for(i = 0; i < n; i++) {
      result += m[i] * v[i];
   }
 
   return result;
}
 
int CopyColumm(SquareMatx* m, int idCol, int** out) {
   if(!m) return -1;
   if(!(*out)) (*out) = (int*) malloc(sizeof(int) * m->n);
 
////   printf("\n");
 
   int i;
   for(i = 0; i < m->n; i++){
      (*out)[i] = m->data[i * m->n + idCol];
//      printf("%d\n", out[i]);
   }
   return 0;
}
 
void GenMatx(SquareMatx** m, int n) {
   (*m) = (SquareMatx*) malloc(sizeof(SquareMatx));
   (*m)->data = (int*) malloc(sizeof(int) * n * n);
   (*m)->n = n;
 
   int i; int n2 = n * n;
   srand(0);
   for(i = 0; i < n2; i++){
      (*m)->data[i] = rand() % 100;
//      if((i+1) % n == 0) printf("\n");
//      printf("%d ", (*m)->data[i]);
   }
}
 
void GenVec(int** v, int n){
   (*v) = (int*) malloc(sizeof(int) * n);
 
   int i;
   srand(0);
   for(i = 0; i < n; i++){
      (*v)[i] = rand() % 100;
//      printf("%d ", m->data[i]);
   }
}
